
PathContainer
  originalWidth = originalWidth;   // original svg width
  originalHeight = originalHeight; // original svg height
  displayWidth = displayWidth;     // display width
  displayHeight = displayHeight;   // display height
  context = <CanvasRenderingContext2D>;             // canvas.getContext("2d")
  rootGroups = [ groupID, ... ];                    // root groups IDs
  groups = [ <GroupObj>, ... ];                     // list of groups
  groupNameToIDList = { groupName : groupID, ... }; // list of group name and group ID
  masks = { maskName : groupID };                   // list of mask name and group ID
  bones = [ groupID, ... ];                         // list of bone ID
  actionList = { actionName : { id : actionID, totalFrames : totalFrames } };  // action info list


GroupObj (no action data)
  id = id;   // g tag ID
  maskIdToUse = maskIdToUse;  // ID of the mask to use
  paths = [<PathObj>, ... ];  // list of PathObj
  hasActionList = [];   // if true, have action
  childGroups = [groupID, ... ];   // list of group id

GroupObj (after add action data)
  id = id;   // g tag ID
  maskIdToUse = maskIdToUse;   // ID of the mask to use
  paths = [<PathObj>, ... ];  // list of PathObj
  hasActionList = [ hasAction, ... ];   // if true, have action
  childGroups = [actionID, ... ][frame, ... ][groupID, ... ]; // list of group id


PathObj (no action data)
  maskIdToUse = maskIdToUse;    // ID of the mask to use
  fillRule = fillRule;          // "nonzero" or "evenodd"
  hasActionList = [];           // if true, have action
  fillStyle = fillStyle;        // fillColor ( context2D.fillStyle )
  lineWidth = lineWidth;        // strokeWidth ( context2D.lineWidth )
  strokeStyle = strokeStyle;    // strokeColor ( context2D.strokeStyle )
  pathDataList = pathDataList;  // path data array
  this.resultPath = {           // path data for drawing
    pathData: [],
    fillStyle: fillStyle,
    lineWidth: lineWidth,
    strokeStyle: strokeStyle,
  };

PathObj (after add action data)
  maskIdToUse = maskIdToUse;    // ID of the mask to use
  fillRule = fillRule;          // "nonzero" or "evenodd"
  hasActionList = [ hasAction, ... ];   // if true, have action
  fillStyle = [actionID, ... ][frame, ... ] = fillStyle;        // fillColor ( context2D.fillStyle )
  lineWidth = [actionID, ... ][frame, ... ] = lineWidth;        // strokeWidth ( context2D.lineWidth )
  strokeStyle = [actionID, ... ][frame, ... ] = strokeStyle;    // strokeColor ( context2D.strokeStyle )
  pathDataList = [actionID, ... ][frame, ... ] = pathDataList;  // path data array


BoneObj - extends GroupObj
  this.parentID = id; // parent bone id
  this.flexi = [ id, ... ];  // ID of a flexi-bonded target
  this.feedback = receiveFeedback;  // receive feedback from other bones
  this.strength = 0;  // scope of influence of bone
  this.defState = { x0, y0, x1, y1, angle }  // default bone state




PathContainer
  originalWidth = originalWidth;         // original svg width
  originalHeight = originalHeight;       // original svg height
  displayWidth = displayWidth;           // display width
  displayHeight = displayHeight;         // display height
  context = <CanvasRenderingContext2D>;  // canvas.getContext("2d")
  rootGroups = [ groupID, ... ];         // root groups IDs
  groups = [ <GroupObj>, ... ];          // list of groups
  masks = { maskName: groupID };         // list of mask name and group ID
  bones = [ groupID, ... ];              // list of bone ID
  currentActionID = currentActionID;     // current action ID
  actionList = [                         // action info list
    {
      name : actionName,
      id : actionID,
      totalFrames : totalFrames,
      smartBoneID: smartBoneID,
      pastFrame: pastFrame,
      currentFrame: currentFrame,
    },
    ...
  ];


GroupObj
  visible = visible;          // display when true
  uid = uid;                  // group list ID
  id = id;                    // g tag ID
  paths = [<PathObj>, ... ];  // list of PathObj
  childGroups = ActionContainer([groupID, ... ]); // list of group id
  maskIdToUse = maskIdToUse;  // ID of the mask to use
  flexi = [ id, ... ];        // ID of a flexi-bonded target


BoneObj
  visible = visible;              // display when true
  uid = uid;                      // group list ID
  id = id;                        // g tag ID
  paths = [<PathObj>, ... ];      // list of PathObj
  childGroups = [groupID, ... ];  // list of group id
  
  parentID = id;                  // parent bone id
  isParentPin = isParentPin;      // parent bone is pin bone
  feedback = receiveFeedback;     // receive feedback from other bones
  
  strength = strength;            // scope of influence of bone
  isSmartBone = isSmartBone;      // is smart bone or not
  smartBase = smartBase;          // base angle
  smartMax = smartMax;            // max angle
  posIK = {                       // data for inverse kinematics
    enable: enable,
    x: x,
    y: y,
  };
  
  effectSprite = <Sprite>;        // actual effect sprite
  defState = { x0, y0, x1, y1, distance, angle }        // default bone state
  currentState = { [x0, y0, x1, y1], distance, angle }  // current bone state
  flexi = [ id, ... ];            // ID of a flexi-bonded target
  flexiPoint = {                  // ID of a flexi-bonded target and data index
    dataIndex: dataIndex,
    bones: [ id, ... ],
  };


PathObj
  maskIdToUse = maskIdToUse;                     // ID of the mask to use
  fillRule = fillRule;                           // "nonzero" or "evenodd"
  fillStyle = ActionContainer(fillStyle);        // fillColor ( context2D.fillStyle )
  lineWidth = ActionContainer(lineWidth);        // strokeWidth ( context2D.lineWidth )
  strokeStyle = ActionContainer(strokeStyle);    // strokeColor ( context2D.strokeStyle )
  pathDiffList = ActionContainer([pathIndex, ... ][x, y, ... ]);  // diff pos data
  defPathList = [pathIndex, ... ][{type, pos}, ... ];     // default path data
  resultPathList = [pathIndex, ... ][{type, pos}, ... ];  // path data for drawing


ActionContainer
  hasAction = hasAction;   // if true, have action
  result = result;         // data for drawing
  data = hasAction? [actionID, ... ][frame, ... ] = <TEMPDATA> : <TEMPDATA>;  // animation data



PathContainer
  originalWidth = originalWidth;   // original svg width
  originalHeight = originalHeight; // original svg height
  displayWidth = displayWidth;     // display width
  displayHeight = displayHeight;   // display height
  context = <CanvasRenderingContext2D>;             // canvas.getContext("2d")
  rootGroups = [ groupID, ... ];                    // root groups IDs
  groups = [ <GroupObj>, ... ];                     // list of groups
  groupNameToIDList = { groupName : groupID, ... }; // list of group name and group ID
  masks = { maskName : groupID };                   // list of mask name and group ID
  bones = [ groupID, ... ];                         // list of bone ID
  actionList = {  // action info list
    actionName : {
      id : actionID,
      totalFrames : totalFrames,
      smartBoneID: smartBoneID,
      pastFrame: pastFrame,
      currentFrame: currentFrame,
    }
  };


GroupObj (no action data)
  id = id;   // g tag ID
  flexi = [ id, ... ];  // ID of a flexi-bonded target
  maskIdToUse = maskIdToUse;  // ID of the mask to use
  paths = [<PathObj>, ... ];  // list of PathObj
  hasActionList = [];   // if true, have action
  childGroups = [groupID, ... ];   // list of group id

GroupObj (after add action data)
  id = id;   // g tag ID
  flexi = [ id, ... ];  // ID of a flexi-bonded target
  maskIdToUse = maskIdToUse;   // ID of the mask to use
  paths = [<PathObj>, ... ];  // list of PathObj
  hasActionList = [ hasAction, ... ];   // if true, have action
  childGroups = [actionID, ... ][frame, ... ][groupID, ... ]; // list of group id


PathObj (no action data)
  maskIdToUse = maskIdToUse;    // ID of the mask to use
  fillRule = fillRule;          // "nonzero" or "evenodd"
  hasActionList = [];           // if true, have action
  fillStyle = fillStyle;        // fillColor ( context2D.fillStyle )
  lineWidth = lineWidth;        // strokeWidth ( context2D.lineWidth )
  strokeStyle = strokeStyle;    // strokeColor ( context2D.strokeStyle )
  pathDiffList = [];            // diff pos data array
  this.defPath = {              // default path data
    pathDataList: pathDataList,
    fillStyle: fillStyle,
    lineWidth: lineWidth,
    strokeStyle: strokeStyle,
  };
  this.resultPath = {           // path data for drawing
    pathDataList: [],
    fillStyle: fillStyle,
    lineWidth: lineWidth,
    strokeStyle: strokeStyle,
  };

PathObj (after add action data)
  maskIdToUse = maskIdToUse;    // ID of the mask to use
  fillRule = fillRule;          // "nonzero" or "evenodd"
  hasActionList = [ hasAction, ... ];   // if true, have action
  fillStyle = [actionID, ... ][frame, ... ] = fillStyle;        // fillColor ( context2D.fillStyle )
  lineWidth = [actionID, ... ][frame, ... ] = lineWidth;        // strokeWidth ( context2D.lineWidth )
  strokeStyle = [actionID, ... ][frame, ... ] = strokeStyle;    // strokeColor ( context2D.strokeStyle )
  pathDiffList = [actionID, ... ][frame, ... ] = pathDiffList;  // diff pos data array
  this.defPath = {              // default path data
    pathDataList: pathDataList,
    fillStyle: fillStyle,
    lineWidth: lineWidth,
    strokeStyle: strokeStyle,
  };
  this.resultPath = {  // path data for drawing
    pathDataList: [],
    fillStyle: fillStyle,
    lineWidth: lineWidth,
    strokeStyle: strokeStyle,
  };


BoneObj - extends GroupObj
  parentID = id;                  // parent bone id
  isParentPin = isParentPin;      // parent bone is pin bone
  feedback = receiveFeedback;     // receive feedback from other bones
  strength = strength;            // scope of influence of bone
  isSmartBone = isSmartBone;      // is smart bone or not
  smartBase = smartBase;          // base angle
  smartMax = smartMax;            // max angle
  effectSprite = <Sprite>;        // actual effect sprite
  isReady = isReady;              // can be used for calculation
  defState = { x0, y0, x1, y1, distance, angle }      // default bone state
  currentState = { x0, y0, x1, y1, distance, angle }  // current bone state


